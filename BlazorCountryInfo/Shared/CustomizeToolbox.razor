@inject PresentationClient PresentationClient

<div class="customize-container">
    <button class="@(InCustomizationMode ? "customize-btn-disabled" : "customize-btn")" @onclick="(() => InCustomizationMode = !InCustomizationMode)">Customize</button> <!--disabled="@InCustomizationMode"-->
    <div class="filters-wrapper" style="display: @(InCustomizationMode ? "flex" : "none")">
        @foreach (var field in Constants.FIELDS.Keys)
        {
            <div class="checkbox-wrapper">
                <input type="checkbox" @bind="PresentationClient.FieldsToPresent[field]" @bind:event="oninput" @onchange="OnFilterClick" />
                <div>@Constants.FIELDS[field]</div>
            </div>
        }
    </div>
</div>

@code {
    //You have to add callbacks that will let index know to update view when checkbox is clicked
    [Parameter]
    public EventCallback OnFilterClick { get; set; }

    public bool InCustomizationMode { get; set; }

    public void DiscardCustomization()
    {
        InCustomizationMode = false;
    }

    public void ApplyCustomization()
    {
        StateHasChanged();
        InCustomizationMode = false;
    }
}
